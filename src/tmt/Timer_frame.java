/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Timer_frame.java
 *
 * Created on Jul 4, 2014, 9:36:56 AM
 */
package tmt;


import java.util.Timer;
import java.util.TimerTask;
import java.util.Timer.*;


/**
 *
 * @author atul
 */
public class Timer_frame extends javax.swing.JFrame {

    /** Creates new form Timer_frame */
    public Timer_frame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start_Button = new javax.swing.JButton();
        stop_Button = new javax.swing.JButton();
        pause_Button = new javax.swing.JButton();
        lap_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        GlobalTime_ShowingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start_Button.setText("Start");
        start_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_ButtonActionPerformed(evt);
            }
        });

        stop_Button.setText("Stop");
        stop_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_ButtonActionPerformed(evt);
            }
        });

        pause_Button.setText("Pause");
        pause_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pause_ButtonActionPerformed(evt);
            }
        });

        lap_Button.setText("Lap");
        lap_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lap_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Global Time :");

        GlobalTime_ShowingLabel.setText("00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GlobalTime_ShowingLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(start_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stop_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pause_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lap_Button)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(GlobalTime_ShowingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start_Button)
                    .addComponent(stop_Button)
                    .addComponent(pause_Button)
                    .addComponent(lap_Button))
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_ButtonActionPerformed
        if (start == false) {
            if (timer != null) {
                timer.cancel();
            }
            timer = new Timer();
            timertask = new MyTimerTask();
            timer.schedule(timertask, 100, 1000);
            counter++;
            start = true;
        } else if (start == true) {
            start = false;
        }
        globalTime.reset();


        // TODO add your handling code here:
    }//GEN-LAST:event_start_ButtonActionPerformed

    private void stop_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_ButtonActionPerformed
        timer.cancel();
        globalTime.reset();


        System.out.println("counter is" + counter);

        // TODO add your handling code here:
    }//GEN-LAST:event_stop_ButtonActionPerformed

    private void pause_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_ButtonActionPerformed
        if (pause == false) {
            timer.cancel();
            globalTime.getHours();
            globalTime.getMinutes();
            globalTime.getSeconds();
            pause = true;
        } else if (pause == true) {


            globalTime.resume();
            timer = new Timer();
            timertask = new MyTimerTask();
            timer.schedule(timertask, globalTime.getHours() + globalTime.getMinutes() + globalTime.getSeconds(), 1000);
            pause = false;
        }
    }//GEN-LAST:event_pause_ButtonActionPerformed

    private void lap_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lap_ButtonActionPerformed
        globalTime.getHours();
        globalTime.getMinutes();
        globalTime.getSeconds();
        System.out.println(globalTime.getHours() + ":" + globalTime.getMinutes() + ":" + globalTime.getSeconds());

        // TODO add your handling code here:
    }//GEN-LAST:event_lap_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Timer_frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GlobalTime_ShowingLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton lap_Button;
    private javax.swing.JButton pause_Button;
    private javax.swing.JButton start_Button;
    private javax.swing.JButton stop_Button;
    // End of variables declaration//GEN-END:variables
    long delay = 10000;
    int counter = 0;
    boolean start = false;
    boolean pause = false;
    Timer timer;
    TimerTask timertask;
    Time globalTime = new Time();
    Time activeTime = new Time();
    Time passiveTime = new Time();

    class MyTimerTask extends TimerTask {

        @Override
        public void run() {
            globalTime.increment();

            GlobalTime_ShowingLabel.setText(globalTime.toString());
            //System.out.println("Global Time => " + globalTime.toString());
        }
    }
}
