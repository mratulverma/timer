/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Timer_frame.java
 *
 * Created on Jul 4, 2014, 9:36:56 AM
 */
package tmt;

import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Timer.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;

/**
 *
 * @author atul
 */
public class Timer_frame extends javax.swing.JFrame {

    /** Creates new form Timer_frame */
    public Timer_frame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start_Button = new javax.swing.JButton();
        stop_Button = new javax.swing.JButton();
        pause_Button = new javax.swing.JButton();
        lap_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        GlobalTime_ShowingLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        KeyTime_ShowingLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ActiveTime_ShowingLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        PassivelTime_ShowingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start_Button.setText("Start");
        start_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_ButtonActionPerformed(evt);
            }
        });

        stop_Button.setText("Stop");
        stop_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_ButtonActionPerformed(evt);
            }
        });

        pause_Button.setText("Pause");
        pause_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pause_ButtonActionPerformed(evt);
            }
        });

        lap_Button.setText("Lap");
        lap_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lap_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Global Time :");

        GlobalTime_ShowingLabel.setText("00:00:00");

        jLabel2.setText("Key Time :");

        KeyTime_ShowingLabel.setText("00:00:00");

        jLabel4.setText("Active Time :");

        ActiveTime_ShowingLabel.setText("00:00:00");

        jLabel6.setText("Passive Time :");

        PassivelTime_ShowingLabel.setText("00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(start_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stop_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pause_Button))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(KeyTime_ShowingLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GlobalTime_ShowingLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ActiveTime_ShowingLabel)
                    .addComponent(lap_Button)
                    .addComponent(PassivelTime_ShowingLabel))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(GlobalTime_ShowingLabel)
                    .addComponent(jLabel4)
                    .addComponent(ActiveTime_ShowingLabel))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(KeyTime_ShowingLabel)
                    .addComponent(jLabel6)
                    .addComponent(PassivelTime_ShowingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start_Button)
                    .addComponent(stop_Button)
                    .addComponent(pause_Button)
                    .addComponent(lap_Button))
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    public void startTimeLog() {
//        if (start == false) {
//            if (timer != null) {
//                timer.cancel();
//            }
//            timer = new Timer();
//           // timertask = new MyTimerTask();
//            timer.schedule(timertask, 100, 1000);
//            start = true;
//        } else if (start == true) {
//            start = false;
//        }
//        if (!globalTime.isEnabled()) {
//            globalTime.setEnabled(true);
//        }
//        if (!activeTime.isEnabled()) {
//            activeTime.setEnabled(true);
//        }
//        if (!keyBoardTime.isEnabled()) {
//            keyBoardTime.setEnabled(true);
//        }
//
//        //globalTime.reset();
//    }

    private void start_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_ButtonActionPerformed

     //   startTimeLog();

        // TODO add your handling code here:
    }//GEN-LAST:event_start_ButtonActionPerformed

    private void stop_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_ButtonActionPerformed
//        timer.cancel();
//        globalTime.reset();
//        start = false;




        // TODO add your handling code here:
    }//GEN-LAST:event_stop_ButtonActionPerformed

    private void pause_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_ButtonActionPerformed
//        if (pause == false) {
//            timer.cancel();
//            globalTime.getHours();
//            globalTime.getMinutes();
//            globalTime.getSeconds();
//            pause = true;
//        } else if (pause == true) {
//
//
//            globalTime.resume();
//            timer = new Timer();
//            //timertask = new MyTimerTask();
//            timer.schedule(timertask, globalTime.getHours() + globalTime.getMinutes() + globalTime.getSeconds(), 1000);
//            pause = false;
//        }
    }//GEN-LAST:event_pause_ButtonActionPerformed

    private void lap_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lap_ButtonActionPerformed
//        globalTime.getHours();
//        globalTime.getMinutes();
//        globalTime.getSeconds();
//        System.out.println(globalTime.getHours() + ":" + globalTime.getMinutes() + ":" + globalTime.getSeconds());
//
//        // TODO add your handling code here:
    }//GEN-LAST:event_lap_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                try {
                    //                new Timer_frame().setVisible(true);
//
//
//                timerMap.put("GLOBAL_TIMER", globalTime);
//                timerMap.put("ACTIVE_TIMER", activeTime);
//                timerMap.put("PASSIVE_TIMER", passiveTime);
//                timerMap.put("KEYBOARD_TIMER", keyBoardTime);
//
//
//                try {
//                    GlobalScreen.registerNativeHook();
//                    GlobalScreen globalScreen = GlobalScreen.getInstance();
//                    globalScreen.addNativeKeyListener(new MyKeyListener(keyBoardTime));
//                    globalScreen.addNativeMouseMotionListener(new MyMouseListener(keyBoardTime));
//                } catch (NativeHookException ex) {
//                    ex.printStackTrace();
//                }
                    
                    TimeTracker.startTimeTracker();
                    
                    // Timer Call
                } catch (SocketException ex) {
                    Logger.getLogger(Timer_frame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(Timer_frame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ActiveTime_ShowingLabel;
    private javax.swing.JLabel GlobalTime_ShowingLabel;
    private javax.swing.JLabel KeyTime_ShowingLabel;
    private javax.swing.JLabel PassivelTime_ShowingLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton lap_Button;
    private javax.swing.JButton pause_Button;
    private javax.swing.JButton start_Button;
    private javax.swing.JButton stop_Button;
    // End of variables declaration//GEN-END:variables
    long delay = 10000;
    int counter = 0;
    boolean start = false;
    boolean pause = false;
    boolean logic = false;
    static Timer timer;
    static TimerTask timertask;
    static Time globalTime = new Time();
    static Time activeTime = new Time();
    static Time passiveTime = new Time();
    static Time keyBoardTime = new Time();
    static HashMap timerMap = new HashMap();
    String previousAppName = null;

//    class MyTimerTask extends TimerTask {
//
//        @Override
//        public void run() {
//            globalTime.increment();
//            keyBoardTime.increment();
//            activeTime.increment();
//            passiveTime.increment();
//
//            System.out.println("active time is started" + activeTime.isEnabled());
//            if (activeTime.isEnabled()) {
//
//                String currentAppName = MyWindowName.getCurrentWindowName();
//                if (previousAppName == null) {
//                    previousAppName = currentAppName;
//                }
//                if (!timerMap.containsKey(currentAppName)) {
//                    Time newTime = new Time();
//                    timerMap.put(currentAppName, newTime);
//                    System.out.println("New Timer Created for - " + currentAppName);
//                }
//
//                if (timerMap.containsKey(currentAppName)) {
//                    System.out.println("Timer found for - " + currentAppName);
//
//                    if (!currentAppName.equals(previousAppName)) {
//                        ((Time) timerMap.get(previousAppName)).setEnabled(false);
//                        previousAppName = currentAppName;
//                    }
//
//                    if (!((Time) timerMap.get(currentAppName)).isEnabled()) {
//                        ((Time) timerMap.get(currentAppName)).setEnabled(true);
//                    }
//
//                    ((Time) timerMap.get(currentAppName)).increment();
//                    System.out.println(currentAppName + " - " + timerMap.get(currentAppName));
//                }
//            }
//
//            GlobalTime_ShowingLabel.setText(globalTime.toString());
//            KeyTime_ShowingLabel.setText(keyBoardTime.toString());
//            ActiveTime_ShowingLabel.setText(activeTime.toString());
//            PassivelTime_ShowingLabel.setText(passiveTime.toString());
//
//            System.out.println("Global Time => " + globalTime.toString());
//        }
//    }

//    static public void keyLogic() {
//        if (keyBoardTime.getSeconds() == 15) {
//            System.out.println("you are not working");
//
//            activeTime.decrementBy(15);
//
//            passiveTime.incrementBy(15);
//            keyBoardTime.reset();
//            passiveTime.setEnabled(true);
//            activeTime.setEnabled(false);
//            keyBoardTime.setEnabled(false);
//
//        }
//    }
//
//    static public void activateOnFooling() {
//        if (!passiveTime.isEnabled()) {
//            passiveTime.setEnabled(true);
//        }
//        if (activeTime.isEnabled()) {
//            activeTime.setEnabled(false);
//        }
//
//    }
//
//    static public void activateOnKeyPress() {
//        if (!activeTime.isEnabled()) {
//            activeTime.setEnabled(true);
//        }
//        if (passiveTime.isEnabled()) {
//            passiveTime.setEnabled(false);
//        }
//    }
//
//    static public void activateOnMouseMotion() {
//        if (!activeTime.isEnabled()) {
//            activeTime.setEnabled(true);
//        }
//        if (passiveTime.isEnabled()) {
//            passiveTime.setEnabled(false);
//        }
 //  }
}
